package maths

import (
	"fmt"
	"strconv"
	"testing"
)

//3463. 判断操作后字符串中的数字是否相等 II(困难)

// 暴力解法
func hasSameDigits(s string) (ans bool) {
	for len(s) > 2 {
		afterS := ""
		num1, _ := strconv.Atoi(string(s[0]))
		for i := 0; i < len(s)-1; i++ {
			num2, _ := strconv.Atoi(string(s[i+1]))
			afterS += strconv.Itoa((num1 + num2) % 10)
			num1 = num2
		}
		s = afterS
	}

	return s[0] == s[1]
}

func hasSameDigits2(s string) (ans bool) {
	sLen := len(s)
	count := sLen - 2
	lastIdx1 := sLen - 2
	lastIdx2 := sLen - 1
	lastNum2, _ := strconv.Atoi(string(s[lastIdx2]))
	lastNum1, _ := strconv.Atoi(string(s[lastIdx1]))
	num1, _ := strconv.Atoi(string(s[0]))
	num2, _ := strconv.Atoi(string(s[1]))
	num1 += lastNum1
	num2 += lastNum2
	for i := 1; i < lastIdx2/2; i++ {
		idx := sLen - i - 1
		thisNum, _ := strconv.Atoi(string(s[i]))
		thisNum2, _ := strconv.Atoi(string(s[idx]))
		if i < sLen-2 {
			num1 += thisNum*count + 2*(i-1)
		}
		if idx != i {
			num1 += thisNum2*count + 2*(i-1)
		}
		if i > 2 {
			num2 += thisNum*count + 2*(i-1)
		}
		if idx != i {
			num2 += thisNum2*count + 2*(i-1)
		}
	}
	return num1%10 == num2%10
}

func TestHasSameDigits(test *testing.T) {
	testCases := []struct {
		s        string
		expected bool
	}{
		{s: "321881", expected: true},
		{s: "34789", expected: false},
		{s: "919", expected: true},
		{s: "27772206472439967932630820228316443855600844049011939008348502218185231792879292246616400065171688780100917917830809559057217119289038463082382320832254885464618628933268581987854140613151425869276303196256326034826491106330920385533187054030551481018664275558027508854368720903841936341083754911078281170396081971103903334558901840082297032507058734481740562015674547828423711154759389584807244364965143193459255233401524395896951461950062289383099351993625163363339666630173114534238799541689029520571373532416388607311328588345764471246577421462736947169457872439025377206480799999435917474831530733622546745595232668883515128063439278669920035045542532801563688826913574788952610110744816416756247675708758256958080698948540162319524610671610159229452208861040518502250368209057825726448076743116068468544794839278750014885545217196774509625651809645613899659204913667633971520856204685046243712777652841911614103552200783376802707871208373741199613040512069458242752267372588645638626103590954050726959662884231513208222397464482681432675027043983473150801299012639546951175279907249676831494900915619273162837335983819995971156965677387120166397683088636981581866092003069629505767172598727237335375475574886795798037693186340586744985527804097977419089275077822763156471480696208011082918997240598935231982590684477177539702532220797761060538664031101084039574311547790549652027959014789702886639356470311643631930027642402232247538685890564977197326157828244234133496819941129715381464132055027910359690375461542193000373481732313958270825937595796730341862915903417650937364818179790253695084028631863060528607693125856270329636656696321623789848545693091958608008200191276164315971890267931452213195361656522447682053891138385181659627264026771441403561723035629721742765462193999224467297846423379018297407907585435488032345872065192401943525129272507204774266699841109642913050775283276028177821734489975876511681989682183588027632592441826913474578991682807088403991410522965869320381267466883027825509349469154434510596749468400044430750704945038538029085207618335058293715375173904686712081273314807955244168827097748050487083699297718724055605483040013435271634510669900364084486697309366156253046870373375205019252667067938901589909691450692303022962059497856809674905763284611755850609426312584220885940978653744361706350860018006429937397876185125967213862936817425919567349182183859158227213239981918089981935721439617757466810531486303846960172081411174396745773192464784371579266245252769944820791374129263320896243192698277561604205170386554424673250698734286014839848067300884635994683571793248358642243834649870926180037465702636405273673700296610137356823157766279925150085734051375905745360407623216234165883762026769045497064166018080149309506108429671666701139689418893534945192150425448883072508760861553680450280728494428921365933631703756811760330591391721314429007162775480614647332593224726286110698029367668570240170511495928299113602614668477861956739266717307667803820741605205328922368608423014484877048135059407737113261215167741700782311394538707529180467225834378432919865556809304202490803747007346103653041521888444324923748358029258235358566681414367892026743530397829072726643440834389660409987187654175375243205853289689947942671947885867026534047406532215157871066526909828836959138925686645999337400564707502168657518108707768359271564584945262888868788137462157611193349944221051431754277843641732192523776802099967667580736633829188383101346782520865886071241521160693381163208255771864408797510780434835757850876455568443964157745628426094892220390881913094634656100650455401800434565260922132128443896993428167012404330360111541468329220178443271727574511910274520936186230824044953285468692425683674590325410222047101142835869030595768292972391083900626587211131577483283768241796238344847064685847468409471475083531664885620191375277640463228923412245238416637437669276002571590364832980913487278486982020131955722995132836560594826086099472199897301947874871583607265000930490436561003994559250347661750272571193414773638075371056323650230577009343451430468637287883584069402641000030321539318670635815759989180608344741742333356393683246688305315494783006923683809629335766792188782449144861080806460855996955260747821587361659", expected: false},
		{s: "059223162476909414787217368465718889720070329493800526721646241144650386182915621907231953557681242064182905239381861256480822308801745728716464165805416272563074544781706952551993233233441914762054761669477046604260289688651191958433480070003587023200105113105431268932582314103774297291977036873970402534522915576764583200175755147667814674754512504911569655037494222537756410610151191257150195557437349822009352297672631564482185262565187532385279714260044303857829021469873315780358707063556775718248201658447824815265573818347949428248619384219498719969693539037903024755075964220907437734386614616595870073534174014967983825396", expected: true}}
	test.Run("generate", func(t *testing.T) {
		for _, cases := range testCases {
			if result := hasSameDigits3(cases.s); result != cases.expected {
				t.Errorf("s:=%v,expected: %v, got: %v", cases.s, cases.expected, result)
			}
		}
	})
}

func pascalTriangleRow(n int) []int {
	if n < 0 {
		return []int{}
	}
	row := make([]int, n+1)
	row[0] = 1
	for i := 1; i <= n; i++ {
		row[i] = row[i-1] * (n - i + 1) / i
	}
	return row
}

// calculateFormulas 根据数组长度计算并返回两个结果。
func hasSameDigits3(s string) bool {
	length := len(s)

	// 获取杨辉三角的对应行（第 length-2 行）
	coefficients := pascalTriangleRow(length - 2)

	// 计算第一个结果
	var result1, result2 int
	for i := 0; i < length-1; i++ {
		num1, _ := strconv.Atoi(string(s[i]))
		num2, _ := strconv.Atoi(string(s[i+1]))
		fmt.Println(coefficients[i], coefficients[i])
		result1 = (result1 + num1*coefficients[i]) % 10
		result2 = (result2 + num2*coefficients[i]) % 10
	}

	fmt.Println(result1, result2)
	return result1 == result2
}
